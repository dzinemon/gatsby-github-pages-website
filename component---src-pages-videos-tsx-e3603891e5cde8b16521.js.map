{"version":3,"file":"component---src-pages-videos-tsx-e3603891e5cde8b16521.js","mappings":"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","sources":["webpack://gatsby-github-pages-website/./src/pages/videos.tsx"],"sourcesContent":["import React, { useState, useMemo } from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport type { HeadFC, PageProps } from \"gatsby\";\n\ninterface VideosPageData {\n  allMarkdownRemark: {\n    nodes: {\n      id: string;\n      frontmatter: {\n        title: string;\n        description: string;\n        tags: string[];\n        youtubeLink: string;\n        date: string;\n      };\n      fields: {\n        slug: string;\n      };\n    }[];\n  };\n}\n\n// Function to extract YouTube video ID from YouTube URL\nconst getYoutubeEmbedId = (url: string): string => {\n  const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return (match && match[2].length === 11) ? match[2] : '';\n};\n\nconst VideosPage: React.FC<PageProps<VideosPageData>> = ({ data }) => {\n  const { allMarkdownRemark } = data;\n  const videos = allMarkdownRemark.nodes;\n  \n  // Get unique tags from all videos\n  const allTags = useMemo(() => {\n    const tagsSet = new Set<string>();\n    videos.forEach(video => {\n      video.frontmatter.tags.forEach(tag => tagsSet.add(tag));\n    });\n    return Array.from(tagsSet).sort();\n  }, [videos]);\n\n  // State for search and filters\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n\n  // Filter videos based on search term and selected tags\n  const filteredVideos = useMemo(() => {\n    return videos.filter(video => {\n      const matchesSearch = \n        searchTerm === \"\" || \n        video.frontmatter.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        video.frontmatter.description.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesTags = \n        selectedTags.length === 0 || \n        selectedTags.some(tag => video.frontmatter.tags.includes(tag));\n      \n      return matchesSearch && matchesTags;\n    });\n  }, [videos, searchTerm, selectedTags]);\n\n  // Handle tag selection\n  const toggleTag = (tag: string) => {\n    setSelectedTags(prev => \n      prev.includes(tag)\n        ? prev.filter(t => t !== tag)\n        : [...prev, tag]\n    );\n  };\n\n  return (\n    <main className=\"container mx-auto px-4 py-8\">\n      <nav className=\"flex mb-4 text-sm\" aria-label=\"Breadcrumb\">\n        <ol className=\"flex items-center space-x-1\">\n          <li>\n            <Link to=\"/\" className=\"text-blue-600 hover:underline\">Home</Link>\n          </li>\n          <li className=\"flex items-center\">\n            <span className=\"mx-1\">/</span>\n            <span className=\"text-gray-500\">Videos</span>\n          </li>\n        </ol>\n      </nav>\n      \n      <h1 className=\"text-3xl font-bold mb-8\">Educational Videos</h1>\n      \n      <div className=\"flex flex-col md:flex-row gap-8\">\n        {/* Filter by tags - Left sticky column */}\n        <div className=\"md:w-1/4 mb-6 md:mb-0\">\n          <div className=\"sticky top-8\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Filter by subject area\n            </label>\n            <div className=\"flex flex-wrap gap-2\">\n              {allTags.map(tag => (\n                <button\n                  key={tag}\n                  onClick={() => toggleTag(tag)}\n                  className={`px-3 py-2 rounded-full text-sm ${\n                    selectedTags.includes(tag)\n                      ? \"bg-blue-600 text-white\"\n                      : \"bg-blue-100 text-blue-800 hover:bg-blue-200\"\n                  }`}\n                >\n                  {tag}\n                </button>\n              ))}\n            </div>\n            \n            {selectedTags.length > 0 && (\n              <button \n                onClick={() => setSelectedTags([])}\n                className=\"mt-4 w-full px-3 py-2 bg-gray-200 text-gray-700 rounded-full text-sm hover:bg-gray-300\"\n              >\n                Clear Filters\n              </button>\n            )}\n          </div>\n        </div>\n        \n        {/* Search and videos - Right column */}\n        <div className=\"md:w-3/4\">\n          {/* Search input */}\n          <div className=\"mb-6\">\n            <label htmlFor=\"search\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Search by title or description\n            </label>\n            <input\n              type=\"text\"\n              id=\"search\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              placeholder=\"Search videos...\"\n              className=\"w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n          \n          {/* Display filtered videos */}\n          {filteredVideos.length > 0 ? (\n            <div className=\"grid grid-cols-1 gap-6\">\n              {filteredVideos.map((video) => {\n                const youtubeEmbedId = getYoutubeEmbedId(video.frontmatter.youtubeLink);\n                return (\n                  <div key={video.id} className=\"border rounded-lg overflow-hidden shadow-md\">\n                    {youtubeEmbedId && (\n                      <div className=\"aspect-w-16 aspect-h-9\">\n                        <iframe\n                          className=\"w-full h-80\"\n                          src={`https://www.youtube.com/embed/${youtubeEmbedId}`}\n                          title={video.frontmatter.title}\n                          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                          allowFullScreen\n                          frameBorder=\"0\"\n                        ></iframe>\n                      </div>\n                    )}\n                    <div className=\"p-6\">\n                      <h3 className=\"text-xl font-semibold mb-2\">\n                        <Link to={video.fields.slug} className=\"text-blue-600 hover:underline\">\n                          {video.frontmatter.title}\n                        </Link>\n                      </h3>\n                      <p className=\"text-gray-600 mb-4\">{video.frontmatter.description}</p>\n                      <div className=\"flex flex-wrap gap-2 mt-4\">\n                        {video.frontmatter.tags.map((tag) => (\n                          <Link \n                            key={tag} \n                            to={`/tags/${tag}`}\n                            className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs\"\n                          >\n                            {tag}\n                          </Link>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-xl text-gray-600\">No videos match your current filters.</p>\n              <button \n                onClick={() => {\n                  setSearchTerm(\"\");\n                  setSelectedTags([]);\n                }}\n                className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n              >\n                Clear Filters\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/content/videos/\" } }\n      sort: { frontmatter: { date: DESC } }\n    ) {\n      nodes {\n        id\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          description\n          tags\n          youtubeLink\n          date(formatString: \"MMMM DD, YYYY\")\n        }\n      }\n    }\n  }\n`;\n\nexport const Head: HeadFC = () => <title>Educational Videos</title>;\n\nexport default VideosPage;"],"names":["Head","React","_ref","data","allMarkdownRemark","videos","nodes","allTags","useMemo","tagsSet","Set","forEach","video","frontmatter","tags","tag","add","Array","from","sort","searchTerm","setSearchTerm","useState","selectedTags","setSelectedTags","filteredVideos","filter","matchesSearch","title","toLowerCase","includes","description","matchesTags","length","some","className","Link","to","map","key","onClick","prev","t","concat","_toConsumableArray","toggleTag","htmlFor","type","id","value","onChange","e","target","placeholder","youtubeEmbedId","url","match","getYoutubeEmbedId","youtubeLink","src","allow","allowFullScreen","frameBorder","fields","slug"],"sourceRoot":""}