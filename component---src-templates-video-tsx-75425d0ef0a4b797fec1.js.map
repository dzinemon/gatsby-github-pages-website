{"version":3,"file":"component---src-templates-video-tsx-75425d0ef0a4b797fec1.js","mappings":"iNAsBA,MAuFaA,EAA8BC,IAAA,IAAC,KAAEC,GAAMD,EAAA,OAAKE,EAAAA,cAAA,aAAQD,EAAKE,eAAeC,YAAYC,MAAc,EAE/G,UAnF4EC,IAAc,IAAb,KAAEL,GAAMK,EACnF,MAAM,eAAEH,GAAmBF,GACrB,YAAEG,EAAW,KAAEG,GAASJ,EACxBK,EATmBC,KACzB,MACMC,EAAQD,EAAIC,MADH,gEAEf,OAAQA,GAA6B,KAApBA,EAAM,GAAGC,OAAiBD,EAAM,GAAK,EAAE,EAMjCE,CAAkBR,EAAYS,aAErD,OACEX,EAAAA,cAAA,QAAMY,UAAU,+BACdZ,EAAAA,cAAA,OAAKY,UAAU,oBAAoB,aAAW,cAC5CZ,EAAAA,cAAA,MAAIY,UAAU,+BACZZ,EAAAA,cAAA,UACEA,EAAAA,cAACa,EAAAA,GAAI,CAACC,GAAG,IAAIF,UAAU,iCAAgC,SAEzDZ,EAAAA,cAAA,MAAIY,UAAU,qBACZZ,EAAAA,cAAA,QAAMY,UAAU,QAAO,KACvBZ,EAAAA,cAACa,EAAAA,GAAI,CAACC,GAAG,UAAUF,UAAU,iCAAgC,WAE/DZ,EAAAA,cAAA,MAAIY,UAAU,qBACZZ,EAAAA,cAAA,QAAMY,UAAU,QAAO,KACvBZ,EAAAA,cAAA,QAAMY,UAAU,iBAAiBV,EAAYC,UAKnDH,EAAAA,cAAA,UAAQY,UAAU,QAChBZ,EAAAA,cAAA,MAAIY,UAAU,2BAA2BV,EAAYC,OACrDH,EAAAA,cAAA,KAAGY,UAAU,8BAA8BV,EAAYa,aACvDf,EAAAA,cAAA,OAAKY,UAAU,6BACZV,EAAYc,KAAKC,KAAKC,GACrBlB,EAAAA,cAACa,EAAAA,GAAI,CACHM,IAAKD,EACLJ,GAAI,SAASI,IACbN,UAAU,4DAETM,OAMTlB,EAAAA,cAAA,OAAKY,UAAU,QACbZ,EAAAA,cAAA,OAAKY,UAAU,0BACbZ,EAAAA,cAAA,UACEY,UAAU,mBACVQ,IAAK,iCAAiCd,IACtCH,MAAOD,EAAYC,MACnBkB,MAAM,2FACNC,iBAAe,EACfC,YAAY,QAKlBvB,EAAAA,cAAA,WACEY,UAAU,+BACVY,wBAAyB,CAAEC,OAAQpB,KAGrCL,EAAAA,cAAA,UAAQY,UAAU,QAChBZ,EAAAA,cAACa,EAAAA,GAAI,CAACC,GAAG,UAAUF,UAAU,iCAAgC,yBAI1D,C","sources":["webpack://gatsby-github-pages-website/./src/templates/video.tsx"],"sourcesContent":["import React from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport type { HeadFC, PageProps } from \"gatsby\";\n\ninterface VideoPageContext {\n  id: string;\n}\n\ninterface VideoPageData {\n  markdownRemark: {\n    frontmatter: {\n      title: string;\n      description: string;\n      tags: string[];\n      youtubeLink: string;\n      date: string;\n    };\n    html: string;\n  };\n}\n\n// Function to extract YouTube video ID from YouTube URL\nconst getYoutubeEmbedId = (url: string): string => {\n  const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return (match && match[2].length === 11) ? match[2] : '';\n};\n\nconst VideoTemplate: React.FC<PageProps<VideoPageData, VideoPageContext>> = ({ data }) => {\n  const { markdownRemark } = data;\n  const { frontmatter, html } = markdownRemark;\n  const youtubeEmbedId = getYoutubeEmbedId(frontmatter.youtubeLink);\n\n  return (\n    <main className=\"container mx-auto px-4 py-8\">\n      <nav className=\"flex mb-4 text-sm\" aria-label=\"Breadcrumb\">\n        <ol className=\"flex items-center space-x-1\">\n          <li>\n            <Link to=\"/\" className=\"text-blue-600 hover:underline\">Home</Link>\n          </li>\n          <li className=\"flex items-center\">\n            <span className=\"mx-1\">/</span>\n            <Link to=\"/videos\" className=\"text-blue-600 hover:underline\">Videos</Link>\n          </li>\n          <li className=\"flex items-center\">\n            <span className=\"mx-1\">/</span>\n            <span className=\"text-gray-500\">{frontmatter.title}</span>\n          </li>\n        </ol>\n      </nav>\n      \n      <header className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">{frontmatter.title}</h1>\n        <p className=\"text-lg text-gray-600 mb-4\">{frontmatter.description}</p>\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {frontmatter.tags.map((tag) => (\n            <Link \n              key={tag} \n              to={`/tags/${tag}`}\n              className=\"bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm\"\n            >\n              {tag}\n            </Link>\n          ))}\n        </div>\n      </header>\n\n      <div className=\"mb-8\">\n        <div className=\"aspect-w-16 aspect-h-9\">\n          <iframe\n            className=\"w-full h-[450px]\"\n            src={`https://www.youtube.com/embed/${youtubeEmbedId}`}\n            title={frontmatter.title}\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n            frameBorder=\"0\"\n          ></iframe>\n        </div>\n      </div>\n\n      <article \n        className=\"prose lg:prose-xl max-w-none\"\n        dangerouslySetInnerHTML={{ __html: html }}\n      />\n\n      <footer className=\"mt-8\">\n        <Link to=\"/videos\" className=\"text-blue-600 hover:underline\">\n          &larr; Back to all videos\n        </Link>\n      </footer>\n    </main>\n  );\n};\n\nexport const query = graphql`\n  query($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        title\n        description\n        tags\n        youtubeLink\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`;\n\nexport const Head: HeadFC<VideoPageData> = ({ data }) => <title>{data.markdownRemark.frontmatter.title}</title>;\n\nexport default VideoTemplate;"],"names":["Head","_ref2","data","React","markdownRemark","frontmatter","title","_ref","html","youtubeEmbedId","url","match","length","getYoutubeEmbedId","youtubeLink","className","Link","to","description","tags","map","tag","key","src","allow","allowFullScreen","frameBorder","dangerouslySetInnerHTML","__html"],"sourceRoot":""}